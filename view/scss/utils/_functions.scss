/**
 * Color getter.
 *
 * @requires {variable} $colors
 * 
 * @example scss
 * color: color("pink");
 * 
 * @param {String} $color - Color to fetch
 *
 * @throws Unfortunately, no color could be retrieved from `$color`. Please make sure it is defined in `$colors` map.
 *
 * @return {Color | Null}
 */
@function color($color) {
  @if not map-has-key($colors, $color) {
    @warn "Unfortunately, no color could be retrieved from `#{$color}`. "
        + "Please make sure it is defined in `$colors` map.";
  }

  @return map-get($colors, $color);
}

/**
 * Responsive manager.
 *
 * @requires {variable} $breakpoints
 * 
 * @param {String} $breakpoint - Breakpoint
 *
 * @example scss
 * @include respond-to("small") {}
 *
 * @example css
 * @media (max-width: 600px) {}
 * 
 * @throws Unfortunately, no value could be retrieved from `$breakpoint`. Please make sure it is defined in `$breakpoints` map.
 */
@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }
 
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}
