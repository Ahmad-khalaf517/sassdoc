// Mixin to give size to elements
// ---
// @param [number] $width : width
// @param [number] $height ($width) : height

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

// Can be called but it's not the point
// Documentation: http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/
// ---
// @private
// ---
// @param [string] $position : position
// @param [list] $args : list of offsets and values

@mixin position($position: null, $args: ()) {
  $offsets: top right bottom left;
  position: $position;                                               // 1

  @each $offset in $offsets {                                        // 3
    $index: index($args, $offset);                                   // 4

    @if $index {                                                     // 5
      @if $index == length($args) {                                  // 6
        #{$offset}: 0;                                               // 7
      }
      @else {                                                        // 8
        $next: nth($args, $index + 1);                               // 9
        @if is-valid-length($next) {                                 // 10
          #{$offset}: $next;                                         // 11
        }
        @else if index($offsets, $next) {                            // 12
          #{$offset}: 0;                                             // 13
        }
        @else {                                                      // 14
          @warn "Invalid value `#{$next}` for offset `#{$offset}`."; // 15
        }
      }
    }
  }
}

// Mixin triplet calling the private mixin
// with the appropriate position value
// Documentation: http://hugogiraudel.com/2014/05/19/new-offsets-sass-mixin/
// ---
// @param [list] $args : list of offsets and values

@mixin absolute($args) {
  @include position(absolute, $args);
}

@mixin relative($args) {
  @include position(relative, $args);
}

@mixin fixed($args) {
  @include position(fixed,   $args);
}

// Mixin handling media queries
// ---
// @param [string] $point : breakpoint to call

@mixin breakpoint($point) {
  @if not map-has-key($breakpoints, $point) {
    @warn "Unknown breakpoint `#{$point}` in $breakpoints map.";
  }

  @else {
    $point: map-get($breakpoints, $point);
    $type: nth($point, 1);
    $value: nth($point, 2);

    @media (#{$type}: #{$value}) {
      @content;
    }
  }
}


// Mixin handling CSS triangles
// ---
// @param [string] $direction : arrow direction
// @param [color] $color (currentColor) : arrow color
// @param [list] $position : arrow position
// @param [number] $size (1em) : arrow size

@mixin triangle($direction, $position, $color: currentColor, $size: 1em) {
  $border: $size solid transparent;

  @if not index(top right bottom left, $direction) {
    @warn "Direction must be one of top, right, bottom or left.";
  }

  @else {
    @include absolute($position);
    @include size(0);
    content: "";
    z-index: 2;
    border-#{opposite-position($direction)}: ($size * 1.5) solid $color;

    @if $direction == top or $direction == bottom {
      border-left: $border;
      border-right: $border;
    }

    @else if $direction == right or $direction == left {
      border-bottom: $border;
      border-top: $border;
    }
  }
}

// Mixin to create both a class and a placeholder at once
// ---
// @param [string] $name : helper name

@mixin helper($name) {
  .#{$name},
  %#{$name} {
    @content;
  }
}


// Mixin to handle cross browser keyframes
// ---
// @param [string] $name : animation name

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}

// Mixin to prefix properties that are not prefixed by Compass
// ---
// @param $property : property to prefix
// @param $value : value to use

@mixin prefixer($property, $value, $vendors: webkit moz ms o) {
  @if $vendors {
    @each $vendor in $vendors {
      #{"-" + $vendor + "-" + $property}: #{$value};
    }
  }
  #{$property}: #{$value};
}

// Mixin to handle element queries breakpoint
// ---
// @param [string] $breakpoint : keyword

@mixin eq($breakpoint) {
  [data-eq-state="#{$breakpoint}"] & {
    @content;
  }
}

// Mixin for opacity
// ---
// @param [number] $opacity : opacity

@mixin opacity($opacity) {
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity * 100})";
  filter: alpha(opacity=#{$opacity * 100});
  opacity: $opacity;
}

// Mixin importing a font
// ---
// @param [string] $name : font name

@mixin font($font-name, $file-name) {
  $path: base-path() + "fonts/";

  @font-face {
    font-family: "#{$font-name}";
    src: url("#{$path + $file-name}.eot");
    src: url("#{$path + $file-name}.eot?#iefix") format("embedded-opentype"),
         url("#{$path + $file-name}.woff") format("woff"),
         url("#{$path + $file-name}.ttf") format("truetype"),
         url("#{$path + $file-name}.svg##{$font-name}") format("svg");
    font-weight: normal;
    font-style: normal;
  }
}

// Mixin handling inline-block and vertical-align
// ---
// @param [string] $align : vertical align

@mixin inline-block($align: null) {
  display: inline-block;
  vertical-align: $align;
}

// Modernizr mixin when a feature is supported
// ---
// @param [arglist] $features : features that need to be supported

@mixin yep($features...) {
  $selector: '';

  @each $feature in $features {
    $selector: #{$selector + "." + $feature};
  }

  #{$selector} & {
    @content;
  }
}

// Modernizr mixin when a feature is not supported
// ---
// @param [arglist] $features : features that shouldn't be supported

@mixin nope($features...) {
  @each $feature in $features {
    #{".no-" + $feature} {
      @content;
    }
  }
}