#!/usr/bin/env node

'use strict';

/*
Usage: sassdoc <src> <dest> [options]

Arguments:
  <src>   Path to your Sass folder.
  <dest>  Path to the destination folder.

Options:
  -h, --help            Bring help.
  --version             Show version.
  -v, --verbose         Run in verbose mode.
  -c, --config=<path>   Path to JSON file containing variable to be passed
                        to the view.
  --no-update-notifier  Do not run the update notifier check.
*/

var fs = require('fs');
var path = require('path');
var sassdoc = require('../src/api');
var docopt = require('docopt').docopt;
var pkg = require('../package.json');
var chalk = require('chalk');
var path = require('path');

var doc = fs.readFileSync(__filename, 'utf-8')
  .split('/*')[1]
  .split('*/')[0]
  .trim();

// Define version
var options = docopt(doc, {version: pkg.version});

// Run update notifier if not explicitely disabled
if (!options['--no-update-notifier']) {
  var notifier = require('update-notifier')({
    packageName: pkg.name,
    packageVersion: pkg.version,
  });

  if (notifier.update) {
    var message = 'Update available: ' + chalk.yellow(update.latest) + ' ' +
                  chalk.gray(' (current: ' + update.current + ')') + '\n' +
                  'Run ' + chalk.blue('npm update -g ' + pkg.name) +
                  'to update.';

    console.log(message);
  }
}

// Set verbose mode
sassdoc.logger.enabled = options['--verbose'];

var configPath;

// Find configuration file
if (options['--config']) {
  // Require given config file

  if (options['--config'][0] === '/') {
    // Absolute
    configPath = options['--config'];
  } else {
    // Relative
    configPath = process.cwd() + '/' + options['--config'];
  }
} else {
  try {
    // Require default config file at project level
    configPath = process.cwd() + '/' + './view.json';
  } catch (e) {
    // Require default config file at SassDoc's level
    configPath = '../view/view.json';
  }
}

var config = require(configPath);

// Find package file
if (typeof config.package === 'string') {
  var packagePath = path.dirname(configPath) + '/' + config.package;

  try {
    config.package = require(packagePath);
  } catch (e) {
    var message = 'Can\'t find a package file at `' + packagePath+ '`.';
    sassdoc.logger.log(chalk.yellow(message));
  }
}

sassdoc.documentize(options['<src>'], options['<dest>'], config);
